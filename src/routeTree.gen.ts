/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TetelekImport } from './routes/tetelek'
import { Route as TetelcreateImport } from './routes/tetelcreate'
import { Route as RegisterImport } from './routes/register'
import { Route as PmchqImport } from './routes/pmchq'
import { Route as MquestionsImport } from './routes/mquestions'
import { Route as MchoiceqImport } from './routes/mchoiceq'
import { Route as LoginImport } from './routes/login'
import { Route as FlashcardsImport } from './routes/flashcards'
import { Route as IndexImport } from './routes/index'
import { Route as TetelekIdImport } from './routes/tetelek/$id'
import { Route as MquestionsIdImport } from './routes/mquestions/$id'
import { Route as AuthProfileImport } from './routes/auth/profile'
import { Route as TetelekIdEditImport } from './routes/tetelek/$id/edit'
import { Route as MquestionsIdEditImport } from './routes/mquestions/$id/edit'

// Create/Update Routes

const TetelekRoute = TetelekImport.update({
  id: '/tetelek',
  path: '/tetelek',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tetelek.lazy').then((d) => d.Route))

const TetelcreateRoute = TetelcreateImport.update({
  id: '/tetelcreate',
  path: '/tetelcreate',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tetelcreate.lazy').then((d) => d.Route))

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const PmchqRoute = PmchqImport.update({
  id: '/pmchq',
  path: '/pmchq',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/pmchq.lazy').then((d) => d.Route))

const MquestionsRoute = MquestionsImport.update({
  id: '/mquestions',
  path: '/mquestions',
  getParentRoute: () => rootRoute,
} as any)

const MchoiceqRoute = MchoiceqImport.update({
  id: '/mchoiceq',
  path: '/mchoiceq',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/mchoiceq.lazy').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const FlashcardsRoute = FlashcardsImport.update({
  id: '/flashcards',
  path: '/flashcards',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/flashcards.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TetelekIdRoute = TetelekIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => TetelekRoute,
} as any)

const MquestionsIdRoute = MquestionsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => MquestionsRoute,
} as any)

const AuthProfileRoute = AuthProfileImport.update({
  id: '/auth/profile',
  path: '/auth/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/profile.lazy').then((d) => d.Route))

const TetelekIdEditRoute = TetelekIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => TetelekIdRoute,
} as any)

const MquestionsIdEditRoute = MquestionsIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => MquestionsIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/flashcards': {
      id: '/flashcards'
      path: '/flashcards'
      fullPath: '/flashcards'
      preLoaderRoute: typeof FlashcardsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/mchoiceq': {
      id: '/mchoiceq'
      path: '/mchoiceq'
      fullPath: '/mchoiceq'
      preLoaderRoute: typeof MchoiceqImport
      parentRoute: typeof rootRoute
    }
    '/mquestions': {
      id: '/mquestions'
      path: '/mquestions'
      fullPath: '/mquestions'
      preLoaderRoute: typeof MquestionsImport
      parentRoute: typeof rootRoute
    }
    '/pmchq': {
      id: '/pmchq'
      path: '/pmchq'
      fullPath: '/pmchq'
      preLoaderRoute: typeof PmchqImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/tetelcreate': {
      id: '/tetelcreate'
      path: '/tetelcreate'
      fullPath: '/tetelcreate'
      preLoaderRoute: typeof TetelcreateImport
      parentRoute: typeof rootRoute
    }
    '/tetelek': {
      id: '/tetelek'
      path: '/tetelek'
      fullPath: '/tetelek'
      preLoaderRoute: typeof TetelekImport
      parentRoute: typeof rootRoute
    }
    '/auth/profile': {
      id: '/auth/profile'
      path: '/auth/profile'
      fullPath: '/auth/profile'
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof rootRoute
    }
    '/mquestions/$id': {
      id: '/mquestions/$id'
      path: '/$id'
      fullPath: '/mquestions/$id'
      preLoaderRoute: typeof MquestionsIdImport
      parentRoute: typeof MquestionsImport
    }
    '/tetelek/$id': {
      id: '/tetelek/$id'
      path: '/$id'
      fullPath: '/tetelek/$id'
      preLoaderRoute: typeof TetelekIdImport
      parentRoute: typeof TetelekImport
    }
    '/mquestions/$id/edit': {
      id: '/mquestions/$id/edit'
      path: '/edit'
      fullPath: '/mquestions/$id/edit'
      preLoaderRoute: typeof MquestionsIdEditImport
      parentRoute: typeof MquestionsIdImport
    }
    '/tetelek/$id/edit': {
      id: '/tetelek/$id/edit'
      path: '/edit'
      fullPath: '/tetelek/$id/edit'
      preLoaderRoute: typeof TetelekIdEditImport
      parentRoute: typeof TetelekIdImport
    }
  }
}

// Create and export the route tree

interface MquestionsIdRouteChildren {
  MquestionsIdEditRoute: typeof MquestionsIdEditRoute
}

const MquestionsIdRouteChildren: MquestionsIdRouteChildren = {
  MquestionsIdEditRoute: MquestionsIdEditRoute,
}

const MquestionsIdRouteWithChildren = MquestionsIdRoute._addFileChildren(
  MquestionsIdRouteChildren,
)

interface MquestionsRouteChildren {
  MquestionsIdRoute: typeof MquestionsIdRouteWithChildren
}

const MquestionsRouteChildren: MquestionsRouteChildren = {
  MquestionsIdRoute: MquestionsIdRouteWithChildren,
}

const MquestionsRouteWithChildren = MquestionsRoute._addFileChildren(
  MquestionsRouteChildren,
)

interface TetelekIdRouteChildren {
  TetelekIdEditRoute: typeof TetelekIdEditRoute
}

const TetelekIdRouteChildren: TetelekIdRouteChildren = {
  TetelekIdEditRoute: TetelekIdEditRoute,
}

const TetelekIdRouteWithChildren = TetelekIdRoute._addFileChildren(
  TetelekIdRouteChildren,
)

interface TetelekRouteChildren {
  TetelekIdRoute: typeof TetelekIdRouteWithChildren
}

const TetelekRouteChildren: TetelekRouteChildren = {
  TetelekIdRoute: TetelekIdRouteWithChildren,
}

const TetelekRouteWithChildren =
  TetelekRoute._addFileChildren(TetelekRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/flashcards': typeof FlashcardsRoute
  '/login': typeof LoginRoute
  '/mchoiceq': typeof MchoiceqRoute
  '/mquestions': typeof MquestionsRouteWithChildren
  '/pmchq': typeof PmchqRoute
  '/register': typeof RegisterRoute
  '/tetelcreate': typeof TetelcreateRoute
  '/tetelek': typeof TetelekRouteWithChildren
  '/auth/profile': typeof AuthProfileRoute
  '/mquestions/$id': typeof MquestionsIdRouteWithChildren
  '/tetelek/$id': typeof TetelekIdRouteWithChildren
  '/mquestions/$id/edit': typeof MquestionsIdEditRoute
  '/tetelek/$id/edit': typeof TetelekIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/flashcards': typeof FlashcardsRoute
  '/login': typeof LoginRoute
  '/mchoiceq': typeof MchoiceqRoute
  '/mquestions': typeof MquestionsRouteWithChildren
  '/pmchq': typeof PmchqRoute
  '/register': typeof RegisterRoute
  '/tetelcreate': typeof TetelcreateRoute
  '/tetelek': typeof TetelekRouteWithChildren
  '/auth/profile': typeof AuthProfileRoute
  '/mquestions/$id': typeof MquestionsIdRouteWithChildren
  '/tetelek/$id': typeof TetelekIdRouteWithChildren
  '/mquestions/$id/edit': typeof MquestionsIdEditRoute
  '/tetelek/$id/edit': typeof TetelekIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/flashcards': typeof FlashcardsRoute
  '/login': typeof LoginRoute
  '/mchoiceq': typeof MchoiceqRoute
  '/mquestions': typeof MquestionsRouteWithChildren
  '/pmchq': typeof PmchqRoute
  '/register': typeof RegisterRoute
  '/tetelcreate': typeof TetelcreateRoute
  '/tetelek': typeof TetelekRouteWithChildren
  '/auth/profile': typeof AuthProfileRoute
  '/mquestions/$id': typeof MquestionsIdRouteWithChildren
  '/tetelek/$id': typeof TetelekIdRouteWithChildren
  '/mquestions/$id/edit': typeof MquestionsIdEditRoute
  '/tetelek/$id/edit': typeof TetelekIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/flashcards'
    | '/login'
    | '/mchoiceq'
    | '/mquestions'
    | '/pmchq'
    | '/register'
    | '/tetelcreate'
    | '/tetelek'
    | '/auth/profile'
    | '/mquestions/$id'
    | '/tetelek/$id'
    | '/mquestions/$id/edit'
    | '/tetelek/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/flashcards'
    | '/login'
    | '/mchoiceq'
    | '/mquestions'
    | '/pmchq'
    | '/register'
    | '/tetelcreate'
    | '/tetelek'
    | '/auth/profile'
    | '/mquestions/$id'
    | '/tetelek/$id'
    | '/mquestions/$id/edit'
    | '/tetelek/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/flashcards'
    | '/login'
    | '/mchoiceq'
    | '/mquestions'
    | '/pmchq'
    | '/register'
    | '/tetelcreate'
    | '/tetelek'
    | '/auth/profile'
    | '/mquestions/$id'
    | '/tetelek/$id'
    | '/mquestions/$id/edit'
    | '/tetelek/$id/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FlashcardsRoute: typeof FlashcardsRoute
  LoginRoute: typeof LoginRoute
  MchoiceqRoute: typeof MchoiceqRoute
  MquestionsRoute: typeof MquestionsRouteWithChildren
  PmchqRoute: typeof PmchqRoute
  RegisterRoute: typeof RegisterRoute
  TetelcreateRoute: typeof TetelcreateRoute
  TetelekRoute: typeof TetelekRouteWithChildren
  AuthProfileRoute: typeof AuthProfileRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FlashcardsRoute: FlashcardsRoute,
  LoginRoute: LoginRoute,
  MchoiceqRoute: MchoiceqRoute,
  MquestionsRoute: MquestionsRouteWithChildren,
  PmchqRoute: PmchqRoute,
  RegisterRoute: RegisterRoute,
  TetelcreateRoute: TetelcreateRoute,
  TetelekRoute: TetelekRouteWithChildren,
  AuthProfileRoute: AuthProfileRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/flashcards",
        "/login",
        "/mchoiceq",
        "/mquestions",
        "/pmchq",
        "/register",
        "/tetelcreate",
        "/tetelek",
        "/auth/profile"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/flashcards": {
      "filePath": "flashcards.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/mchoiceq": {
      "filePath": "mchoiceq.tsx"
    },
    "/mquestions": {
      "filePath": "mquestions.tsx",
      "children": [
        "/mquestions/$id"
      ]
    },
    "/pmchq": {
      "filePath": "pmchq.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/tetelcreate": {
      "filePath": "tetelcreate.tsx"
    },
    "/tetelek": {
      "filePath": "tetelek.tsx",
      "children": [
        "/tetelek/$id"
      ]
    },
    "/auth/profile": {
      "filePath": "auth/profile.tsx"
    },
    "/mquestions/$id": {
      "filePath": "mquestions/$id.tsx",
      "parent": "/mquestions",
      "children": [
        "/mquestions/$id/edit"
      ]
    },
    "/tetelek/$id": {
      "filePath": "tetelek/$id.tsx",
      "parent": "/tetelek",
      "children": [
        "/tetelek/$id/edit"
      ]
    },
    "/mquestions/$id/edit": {
      "filePath": "mquestions/$id/edit.tsx",
      "parent": "/mquestions/$id"
    },
    "/tetelek/$id/edit": {
      "filePath": "tetelek/$id/edit.tsx",
      "parent": "/tetelek/$id"
    }
  }
}
ROUTE_MANIFEST_END */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TetelekImport } from './routes/tetelek'
import { Route as TetelcreateImport } from './routes/tetelcreate'
import { Route as RegisterImport } from './routes/register'
import { Route as MchoiceqImport } from './routes/mchoiceq'
import { Route as LoginImport } from './routes/login'
import { Route as FlashcardsImport } from './routes/flashcards'
import { Route as IndexImport } from './routes/index'
import { Route as TetelekIdImport } from './routes/tetelek/$id'
import { Route as MquestionsIdImport } from './routes/mquestions/$id'
import { Route as AuthProfileImport } from './routes/auth/profile'
import { Route as TetelekIdQuestionsImport } from './routes/tetelek/$id/questions'
import { Route as TetelekIdFlashcardsImport } from './routes/tetelek/$id/flashcards'
import { Route as TetelekIdDetailsImport } from './routes/tetelek/$id/details'
import { Route as MquestionsIdEditImport } from './routes/mquestions/$id/edit'
import { Route as TetelekIdQuestionsTestImport } from './routes/tetelek/$id/questions/test'
import { Route as TetelekIdQuestionsAddImport } from './routes/tetelek/$id/questions/add'
import { Route as TetelekIdQuestionsQidImport } from './routes/tetelek/$id/questions/$qid'
import { Route as TetelekIdDetailsEditImport } from './routes/tetelek/$id/details/edit'
import { Route as TetelekIdQuestionsQidEditImport } from './routes/tetelek/$id/questions/$qid/edit'

// Create/Update Routes

const TetelekRoute = TetelekImport.update({
  id: '/tetelek',
  path: '/tetelek',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tetelek.lazy').then((d) => d.Route))

const TetelcreateRoute = TetelcreateImport.update({
  id: '/tetelcreate',
  path: '/tetelcreate',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tetelcreate.lazy').then((d) => d.Route))

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const MchoiceqRoute = MchoiceqImport.update({
  id: '/mchoiceq',
  path: '/mchoiceq',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/mchoiceq.lazy').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const FlashcardsRoute = FlashcardsImport.update({
  id: '/flashcards',
  path: '/flashcards',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/flashcards.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TetelekIdRoute = TetelekIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => TetelekRoute,
} as any).lazy(() => import('./routes/tetelek/$id.lazy').then((d) => d.Route))

const MquestionsIdRoute = MquestionsIdImport.update({
  id: '/mquestions/$id',
  path: '/mquestions/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/mquestions/$id.lazy').then((d) => d.Route),
)

const AuthProfileRoute = AuthProfileImport.update({
  id: '/auth/profile',
  path: '/auth/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/profile.lazy').then((d) => d.Route))

const TetelekIdQuestionsRoute = TetelekIdQuestionsImport.update({
  id: '/questions',
  path: '/questions',
  getParentRoute: () => TetelekIdRoute,
} as any).lazy(() =>
  import('./routes/tetelek/$id/questions.lazy').then((d) => d.Route),
)

const TetelekIdFlashcardsRoute = TetelekIdFlashcardsImport.update({
  id: '/flashcards',
  path: '/flashcards',
  getParentRoute: () => TetelekIdRoute,
} as any).lazy(() =>
  import('./routes/tetelek/$id/flashcards.lazy').then((d) => d.Route),
)

const TetelekIdDetailsRoute = TetelekIdDetailsImport.update({
  id: '/details',
  path: '/details',
  getParentRoute: () => TetelekIdRoute,
} as any).lazy(() =>
  import('./routes/tetelek/$id/details.lazy').then((d) => d.Route),
)

const MquestionsIdEditRoute = MquestionsIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => MquestionsIdRoute,
} as any).lazy(() =>
  import('./routes/mquestions/$id/edit.lazy').then((d) => d.Route),
)

const TetelekIdQuestionsTestRoute = TetelekIdQuestionsTestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => TetelekIdQuestionsRoute,
} as any).lazy(() =>
  import('./routes/tetelek/$id/questions/test.lazy').then((d) => d.Route),
)

const TetelekIdQuestionsAddRoute = TetelekIdQuestionsAddImport.update({
  id: '/add',
  path: '/add',
  getParentRoute: () => TetelekIdQuestionsRoute,
} as any).lazy(() =>
  import('./routes/tetelek/$id/questions/add.lazy').then((d) => d.Route),
)

const TetelekIdQuestionsQidRoute = TetelekIdQuestionsQidImport.update({
  id: '/$qid',
  path: '/$qid',
  getParentRoute: () => TetelekIdQuestionsRoute,
} as any).lazy(() =>
  import('./routes/tetelek/$id/questions/$qid.lazy').then((d) => d.Route),
)

const TetelekIdDetailsEditRoute = TetelekIdDetailsEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => TetelekIdDetailsRoute,
} as any).lazy(() =>
  import('./routes/tetelek/$id/details/edit.lazy').then((d) => d.Route),
)

const TetelekIdQuestionsQidEditRoute = TetelekIdQuestionsQidEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => TetelekIdQuestionsQidRoute,
} as any).lazy(() =>
  import('./routes/tetelek/$id/questions/$qid/edit.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/flashcards': {
      id: '/flashcards'
      path: '/flashcards'
      fullPath: '/flashcards'
      preLoaderRoute: typeof FlashcardsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/mchoiceq': {
      id: '/mchoiceq'
      path: '/mchoiceq'
      fullPath: '/mchoiceq'
      preLoaderRoute: typeof MchoiceqImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/tetelcreate': {
      id: '/tetelcreate'
      path: '/tetelcreate'
      fullPath: '/tetelcreate'
      preLoaderRoute: typeof TetelcreateImport
      parentRoute: typeof rootRoute
    }
    '/tetelek': {
      id: '/tetelek'
      path: '/tetelek'
      fullPath: '/tetelek'
      preLoaderRoute: typeof TetelekImport
      parentRoute: typeof rootRoute
    }
    '/auth/profile': {
      id: '/auth/profile'
      path: '/auth/profile'
      fullPath: '/auth/profile'
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof rootRoute
    }
    '/mquestions/$id': {
      id: '/mquestions/$id'
      path: '/mquestions/$id'
      fullPath: '/mquestions/$id'
      preLoaderRoute: typeof MquestionsIdImport
      parentRoute: typeof rootRoute
    }
    '/tetelek/$id': {
      id: '/tetelek/$id'
      path: '/$id'
      fullPath: '/tetelek/$id'
      preLoaderRoute: typeof TetelekIdImport
      parentRoute: typeof TetelekImport
    }
    '/mquestions/$id/edit': {
      id: '/mquestions/$id/edit'
      path: '/edit'
      fullPath: '/mquestions/$id/edit'
      preLoaderRoute: typeof MquestionsIdEditImport
      parentRoute: typeof MquestionsIdImport
    }
    '/tetelek/$id/details': {
      id: '/tetelek/$id/details'
      path: '/details'
      fullPath: '/tetelek/$id/details'
      preLoaderRoute: typeof TetelekIdDetailsImport
      parentRoute: typeof TetelekIdImport
    }
    '/tetelek/$id/flashcards': {
      id: '/tetelek/$id/flashcards'
      path: '/flashcards'
      fullPath: '/tetelek/$id/flashcards'
      preLoaderRoute: typeof TetelekIdFlashcardsImport
      parentRoute: typeof TetelekIdImport
    }
    '/tetelek/$id/questions': {
      id: '/tetelek/$id/questions'
      path: '/questions'
      fullPath: '/tetelek/$id/questions'
      preLoaderRoute: typeof TetelekIdQuestionsImport
      parentRoute: typeof TetelekIdImport
    }
    '/tetelek/$id/details/edit': {
      id: '/tetelek/$id/details/edit'
      path: '/edit'
      fullPath: '/tetelek/$id/details/edit'
      preLoaderRoute: typeof TetelekIdDetailsEditImport
      parentRoute: typeof TetelekIdDetailsImport
    }
    '/tetelek/$id/questions/$qid': {
      id: '/tetelek/$id/questions/$qid'
      path: '/$qid'
      fullPath: '/tetelek/$id/questions/$qid'
      preLoaderRoute: typeof TetelekIdQuestionsQidImport
      parentRoute: typeof TetelekIdQuestionsImport
    }
    '/tetelek/$id/questions/add': {
      id: '/tetelek/$id/questions/add'
      path: '/add'
      fullPath: '/tetelek/$id/questions/add'
      preLoaderRoute: typeof TetelekIdQuestionsAddImport
      parentRoute: typeof TetelekIdQuestionsImport
    }
    '/tetelek/$id/questions/test': {
      id: '/tetelek/$id/questions/test'
      path: '/test'
      fullPath: '/tetelek/$id/questions/test'
      preLoaderRoute: typeof TetelekIdQuestionsTestImport
      parentRoute: typeof TetelekIdQuestionsImport
    }
    '/tetelek/$id/questions/$qid/edit': {
      id: '/tetelek/$id/questions/$qid/edit'
      path: '/edit'
      fullPath: '/tetelek/$id/questions/$qid/edit'
      preLoaderRoute: typeof TetelekIdQuestionsQidEditImport
      parentRoute: typeof TetelekIdQuestionsQidImport
    }
  }
}

// Create and export the route tree

interface TetelekIdDetailsRouteChildren {
  TetelekIdDetailsEditRoute: typeof TetelekIdDetailsEditRoute
}

const TetelekIdDetailsRouteChildren: TetelekIdDetailsRouteChildren = {
  TetelekIdDetailsEditRoute: TetelekIdDetailsEditRoute,
}

const TetelekIdDetailsRouteWithChildren =
  TetelekIdDetailsRoute._addFileChildren(TetelekIdDetailsRouteChildren)

interface TetelekIdQuestionsQidRouteChildren {
  TetelekIdQuestionsQidEditRoute: typeof TetelekIdQuestionsQidEditRoute
}

const TetelekIdQuestionsQidRouteChildren: TetelekIdQuestionsQidRouteChildren = {
  TetelekIdQuestionsQidEditRoute: TetelekIdQuestionsQidEditRoute,
}

const TetelekIdQuestionsQidRouteWithChildren =
  TetelekIdQuestionsQidRoute._addFileChildren(
    TetelekIdQuestionsQidRouteChildren,
  )

interface TetelekIdQuestionsRouteChildren {
  TetelekIdQuestionsQidRoute: typeof TetelekIdQuestionsQidRouteWithChildren
  TetelekIdQuestionsAddRoute: typeof TetelekIdQuestionsAddRoute
  TetelekIdQuestionsTestRoute: typeof TetelekIdQuestionsTestRoute
}

const TetelekIdQuestionsRouteChildren: TetelekIdQuestionsRouteChildren = {
  TetelekIdQuestionsQidRoute: TetelekIdQuestionsQidRouteWithChildren,
  TetelekIdQuestionsAddRoute: TetelekIdQuestionsAddRoute,
  TetelekIdQuestionsTestRoute: TetelekIdQuestionsTestRoute,
}

const TetelekIdQuestionsRouteWithChildren =
  TetelekIdQuestionsRoute._addFileChildren(TetelekIdQuestionsRouteChildren)

interface TetelekIdRouteChildren {
  TetelekIdDetailsRoute: typeof TetelekIdDetailsRouteWithChildren
  TetelekIdFlashcardsRoute: typeof TetelekIdFlashcardsRoute
  TetelekIdQuestionsRoute: typeof TetelekIdQuestionsRouteWithChildren
}

const TetelekIdRouteChildren: TetelekIdRouteChildren = {
  TetelekIdDetailsRoute: TetelekIdDetailsRouteWithChildren,
  TetelekIdFlashcardsRoute: TetelekIdFlashcardsRoute,
  TetelekIdQuestionsRoute: TetelekIdQuestionsRouteWithChildren,
}

const TetelekIdRouteWithChildren = TetelekIdRoute._addFileChildren(
  TetelekIdRouteChildren,
)

interface TetelekRouteChildren {
  TetelekIdRoute: typeof TetelekIdRouteWithChildren
}

const TetelekRouteChildren: TetelekRouteChildren = {
  TetelekIdRoute: TetelekIdRouteWithChildren,
}

const TetelekRouteWithChildren =
  TetelekRoute._addFileChildren(TetelekRouteChildren)

interface MquestionsIdRouteChildren {
  MquestionsIdEditRoute: typeof MquestionsIdEditRoute
}

const MquestionsIdRouteChildren: MquestionsIdRouteChildren = {
  MquestionsIdEditRoute: MquestionsIdEditRoute,
}

const MquestionsIdRouteWithChildren = MquestionsIdRoute._addFileChildren(
  MquestionsIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/flashcards': typeof FlashcardsRoute
  '/login': typeof LoginRoute
  '/mchoiceq': typeof MchoiceqRoute
  '/register': typeof RegisterRoute
  '/tetelcreate': typeof TetelcreateRoute
  '/tetelek': typeof TetelekRouteWithChildren
  '/auth/profile': typeof AuthProfileRoute
  '/mquestions/$id': typeof MquestionsIdRouteWithChildren
  '/tetelek/$id': typeof TetelekIdRouteWithChildren
  '/mquestions/$id/edit': typeof MquestionsIdEditRoute
  '/tetelek/$id/details': typeof TetelekIdDetailsRouteWithChildren
  '/tetelek/$id/flashcards': typeof TetelekIdFlashcardsRoute
  '/tetelek/$id/questions': typeof TetelekIdQuestionsRouteWithChildren
  '/tetelek/$id/details/edit': typeof TetelekIdDetailsEditRoute
  '/tetelek/$id/questions/$qid': typeof TetelekIdQuestionsQidRouteWithChildren
  '/tetelek/$id/questions/add': typeof TetelekIdQuestionsAddRoute
  '/tetelek/$id/questions/test': typeof TetelekIdQuestionsTestRoute
  '/tetelek/$id/questions/$qid/edit': typeof TetelekIdQuestionsQidEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/flashcards': typeof FlashcardsRoute
  '/login': typeof LoginRoute
  '/mchoiceq': typeof MchoiceqRoute
  '/register': typeof RegisterRoute
  '/tetelcreate': typeof TetelcreateRoute
  '/tetelek': typeof TetelekRouteWithChildren
  '/auth/profile': typeof AuthProfileRoute
  '/mquestions/$id': typeof MquestionsIdRouteWithChildren
  '/tetelek/$id': typeof TetelekIdRouteWithChildren
  '/mquestions/$id/edit': typeof MquestionsIdEditRoute
  '/tetelek/$id/details': typeof TetelekIdDetailsRouteWithChildren
  '/tetelek/$id/flashcards': typeof TetelekIdFlashcardsRoute
  '/tetelek/$id/questions': typeof TetelekIdQuestionsRouteWithChildren
  '/tetelek/$id/details/edit': typeof TetelekIdDetailsEditRoute
  '/tetelek/$id/questions/$qid': typeof TetelekIdQuestionsQidRouteWithChildren
  '/tetelek/$id/questions/add': typeof TetelekIdQuestionsAddRoute
  '/tetelek/$id/questions/test': typeof TetelekIdQuestionsTestRoute
  '/tetelek/$id/questions/$qid/edit': typeof TetelekIdQuestionsQidEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/flashcards': typeof FlashcardsRoute
  '/login': typeof LoginRoute
  '/mchoiceq': typeof MchoiceqRoute
  '/register': typeof RegisterRoute
  '/tetelcreate': typeof TetelcreateRoute
  '/tetelek': typeof TetelekRouteWithChildren
  '/auth/profile': typeof AuthProfileRoute
  '/mquestions/$id': typeof MquestionsIdRouteWithChildren
  '/tetelek/$id': typeof TetelekIdRouteWithChildren
  '/mquestions/$id/edit': typeof MquestionsIdEditRoute
  '/tetelek/$id/details': typeof TetelekIdDetailsRouteWithChildren
  '/tetelek/$id/flashcards': typeof TetelekIdFlashcardsRoute
  '/tetelek/$id/questions': typeof TetelekIdQuestionsRouteWithChildren
  '/tetelek/$id/details/edit': typeof TetelekIdDetailsEditRoute
  '/tetelek/$id/questions/$qid': typeof TetelekIdQuestionsQidRouteWithChildren
  '/tetelek/$id/questions/add': typeof TetelekIdQuestionsAddRoute
  '/tetelek/$id/questions/test': typeof TetelekIdQuestionsTestRoute
  '/tetelek/$id/questions/$qid/edit': typeof TetelekIdQuestionsQidEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/flashcards'
    | '/login'
    | '/mchoiceq'
    | '/register'
    | '/tetelcreate'
    | '/tetelek'
    | '/auth/profile'
    | '/mquestions/$id'
    | '/tetelek/$id'
    | '/mquestions/$id/edit'
    | '/tetelek/$id/details'
    | '/tetelek/$id/flashcards'
    | '/tetelek/$id/questions'
    | '/tetelek/$id/details/edit'
    | '/tetelek/$id/questions/$qid'
    | '/tetelek/$id/questions/add'
    | '/tetelek/$id/questions/test'
    | '/tetelek/$id/questions/$qid/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/flashcards'
    | '/login'
    | '/mchoiceq'
    | '/register'
    | '/tetelcreate'
    | '/tetelek'
    | '/auth/profile'
    | '/mquestions/$id'
    | '/tetelek/$id'
    | '/mquestions/$id/edit'
    | '/tetelek/$id/details'
    | '/tetelek/$id/flashcards'
    | '/tetelek/$id/questions'
    | '/tetelek/$id/details/edit'
    | '/tetelek/$id/questions/$qid'
    | '/tetelek/$id/questions/add'
    | '/tetelek/$id/questions/test'
    | '/tetelek/$id/questions/$qid/edit'
  id:
    | '__root__'
    | '/'
    | '/flashcards'
    | '/login'
    | '/mchoiceq'
    | '/register'
    | '/tetelcreate'
    | '/tetelek'
    | '/auth/profile'
    | '/mquestions/$id'
    | '/tetelek/$id'
    | '/mquestions/$id/edit'
    | '/tetelek/$id/details'
    | '/tetelek/$id/flashcards'
    | '/tetelek/$id/questions'
    | '/tetelek/$id/details/edit'
    | '/tetelek/$id/questions/$qid'
    | '/tetelek/$id/questions/add'
    | '/tetelek/$id/questions/test'
    | '/tetelek/$id/questions/$qid/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FlashcardsRoute: typeof FlashcardsRoute
  LoginRoute: typeof LoginRoute
  MchoiceqRoute: typeof MchoiceqRoute
  RegisterRoute: typeof RegisterRoute
  TetelcreateRoute: typeof TetelcreateRoute
  TetelekRoute: typeof TetelekRouteWithChildren
  AuthProfileRoute: typeof AuthProfileRoute
  MquestionsIdRoute: typeof MquestionsIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FlashcardsRoute: FlashcardsRoute,
  LoginRoute: LoginRoute,
  MchoiceqRoute: MchoiceqRoute,
  RegisterRoute: RegisterRoute,
  TetelcreateRoute: TetelcreateRoute,
  TetelekRoute: TetelekRouteWithChildren,
  AuthProfileRoute: AuthProfileRoute,
  MquestionsIdRoute: MquestionsIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/flashcards",
        "/login",
        "/mchoiceq",
        "/register",
        "/tetelcreate",
        "/tetelek",
        "/auth/profile",
        "/mquestions/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/flashcards": {
      "filePath": "flashcards.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/mchoiceq": {
      "filePath": "mchoiceq.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/tetelcreate": {
      "filePath": "tetelcreate.tsx"
    },
    "/tetelek": {
      "filePath": "tetelek.tsx",
      "children": [
        "/tetelek/$id"
      ]
    },
    "/auth/profile": {
      "filePath": "auth/profile.tsx"
    },
    "/mquestions/$id": {
      "filePath": "mquestions/$id.tsx",
      "children": [
        "/mquestions/$id/edit"
      ]
    },
    "/tetelek/$id": {
      "filePath": "tetelek/$id.tsx",
      "parent": "/tetelek",
      "children": [
        "/tetelek/$id/details",
        "/tetelek/$id/flashcards",
        "/tetelek/$id/questions"
      ]
    },
    "/mquestions/$id/edit": {
      "filePath": "mquestions/$id/edit.tsx",
      "parent": "/mquestions/$id"
    },
    "/tetelek/$id/details": {
      "filePath": "tetelek/$id/details.tsx",
      "parent": "/tetelek/$id",
      "children": [
        "/tetelek/$id/details/edit"
      ]
    },
    "/tetelek/$id/flashcards": {
      "filePath": "tetelek/$id/flashcards.tsx",
      "parent": "/tetelek/$id"
    },
    "/tetelek/$id/questions": {
      "filePath": "tetelek/$id/questions.tsx",
      "parent": "/tetelek/$id",
      "children": [
        "/tetelek/$id/questions/$qid",
        "/tetelek/$id/questions/add",
        "/tetelek/$id/questions/test"
      ]
    },
    "/tetelek/$id/details/edit": {
      "filePath": "tetelek/$id/details/edit.tsx",
      "parent": "/tetelek/$id/details"
    },
    "/tetelek/$id/questions/$qid": {
      "filePath": "tetelek/$id/questions/$qid.tsx",
      "parent": "/tetelek/$id/questions",
      "children": [
        "/tetelek/$id/questions/$qid/edit"
      ]
    },
    "/tetelek/$id/questions/add": {
      "filePath": "tetelek/$id/questions/add.tsx",
      "parent": "/tetelek/$id/questions"
    },
    "/tetelek/$id/questions/test": {
      "filePath": "tetelek/$id/questions/test.tsx",
      "parent": "/tetelek/$id/questions"
    },
    "/tetelek/$id/questions/$qid/edit": {
      "filePath": "tetelek/$id/questions/$qid/edit.tsx",
      "parent": "/tetelek/$id/questions/$qid"
    }
  }
}
ROUTE_MANIFEST_END */
